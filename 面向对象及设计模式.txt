名词解释：
	
	耦合：
		也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块
		之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决
		于模块间接口的复杂性、调用的方式及传递的信息。属于一种特殊的关联关系，
		比如一个类A作为另一个类B的属性，并且类A的引用不单单只有类b持有，比如类A
		是外部创建好传入类B的，当B结束生命周期时，A可能还存在。
		
	组合：
		属于一种特殊的聚合，就是当B结束生命周期时，A也结束了，不会再存在，一般
		是只有类B才支持其实例。
		
	
	内聚：
		又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的
		紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，
		则它的内聚性就越高

	创造型设计模式：
		创建对象的模式，例如单例
	
	结构型设计模式：
		解决怎么封装现有的类，设计他们的交互方式，从而达到一定的功能需求。
	
	行为型设计模式：
		只要解决算法到对象间的职责的分配。比如适配器，代理等
	
面向对象：

	六大原则：
		
		1.单一职责原则 Single Responsibility Principle (SRP)
			一个类中应该是一组相关性很高的函数和数据的封装。核心（解耦和增内聚）
			但是所谓的职责是不好划分的，个人认为，一个类最好只做一件事，这样就
			可以避免做多件事的时候，事1的改变导致事2的不能正常运行。
			
		2.开闭原则 Open Close Principle (OCP)
			软件中的对象（类、模块、函数等）应该对于扩展时开放的，对于修改是封闭的
			但现实一般都是在扩展代码的同时会修改原有代码。而遵守开闭原则的最好手段
			就是通过抽象（抽象类或接口）来完成。
			
		3.里氏替换原则 Liskov Substitution Principle (LSP)
			直接搬定义，所有引用基类的地方必须能透明的使用其子类的对象。这个原则
			就是依赖于继承、多态这两大特性。（引用子类的地方，父类不一定可行）
			
		4.依赖倒置原则 Dependence Inversion Principle (DIP)
			解耦，使高层次的模块不依赖于低层次的模块的实现细节，即各自依赖其抽象。
			细节依赖抽象，反之不行。
			
		5.接口隔离原则 InterfaceSegregation Principle (ISP)
			类之间的依赖关系应该建立在最小的接口上。  以上是五大原则SOLID
			
		6.迪米特原则 Law of Demeter (LOD)	
			一个对象应该对其他对象有最少的了解。
			
	以上六大原则看似定义不同，但具体的实现都离不开三大特性，即封装、继承、多态，其实
	也是这三大特性的合理使用，不断的打代码，不断的思考，会发现这些原则会让你在开发
	之路上神清气爽。
			
	三大特性：
		
		1.封装
			其实单一职责就是一个很好的解释，也是在进行类的封装的时候的最好指导。
			
		2.继承
			可以使用现有类的所有功能，并在无需重新编写。官方说子类不继承父类的私有
			成员属性，但是子类可以通过继承的（public or protected）的方法来使用。例
			如属性的get方法。
			
		3.多态
			动态绑定，父类会根据被实例的子类的不同，而动态的去调用子类的方法。
			
设计模式：
	
	1.单例模式
		某个类只有一个实例，存在的原因是这个类的实例化会消耗很多的资源。
		实现时最重要的一点是构造方法要私有化，通过静态方法或枚举返回单例对象。
		其他的几个点就是保证多线程下的单例，单例对象在反序列话时不会新建对象。
		
		饿汉模式：
			声明时即初始化。
		懒汉模式：
			调用返回实例的方法中初始化。	
		Double Check Lock(DCL) ：
			通过synchronized锁定class，已保证线程安全。同时前后两次判断单例是否null
			但是有失效的情况，new A()操作不是原子操作，会被编译成多条汇编，大致做
			三件事，实例分配内存、调用构造方法初始化成员在、实例指向内存，在java1.5
			前，第二三步可能会顺序颠倒，从而导致这种极限失效问题的存在，使用volatile
			声明单例可保正确性。java6以后正常。
		静态内部类单例模式
			public class A{
				private A();
				public static A getInstance(){
					return InnerA.instance;
				}
				private static class InnerA{
					private static final A instance = new A();
				}
			}
		以上方式在类中需加入这段代码，才能保证反序列化时不会产生新对象：
			private Object readResolve() throw objectStreamException{
				return '单例对象'
			}
		枚举单例
			public enum A{
				INSTANCE;
				....
			}
		
	2.Builder模式
		将一个复杂的对象的构建与他的表现分离，使同样的构建过程可以创建不同的表示。
		当一个同一个对象的相同方法不同的执行顺序产生不同的事件结果时可以使用此模式
		参数众多，并且大部分有默认值得时候。一般都是链式调用。
		
	3.原型模式
		通过拷贝现有的原型实例来创建新的对象。
		通过实现Cloneable接口的原型模式在调用clone函数构造实例时不一定比new操作速度
		快，只有new构造对象很耗时、成本高时才能获得效率上的提升。
		
	4.工厂模式
		将实例化一个或多个对象的操作封装起来，即可以看做是工厂模式。
			简单工厂：
				通过一个变量来控制要实例化哪个对象。
			
		定义一个用于创建对象的接口，让子类来决定实例化哪个类。
			工厂模式：
				定义一个 ‘产品’ 接口，产品子类都实现这个接口，定义一个 ‘工厂’
				接口，里面有用于生产‘产品’的方法，工厂子类都实现这个接口，这样不同的
				工厂就能生产不同的产品。
				
				或者工厂是利用反射来动态决定实例化哪个类，（产品还是要实现产品接口）
	
	5.抽象工厂模式
		将多个相关对象的实例化操作封装，从而使工厂实例能够产出不同的组合。
		
	6.策略模式
		定义一系列的算法，并将每个算法封装，可以互相替换。
		当一个问题有多个解决方案的时候，为了避免过多的if-else时。
		动画插拔器TimeInterpolator （时间流逝百分比）与 
		类型估值器TypeEvaluator （属性值改变的百分比）
		
		LinearInterpolator:匀速运动
		AccelerataDecelerateInterpolator : 开始加速，结尾减速
		DecelerateInterpolator:减速运动
		
		IntEvaluator、FloatEvaluator、ArgbEvaluator
		
		
	7.状态模式
		内部状态的改变会影响其行为的改变。比如登陆于未登录下的点赞操作。
		可以去掉大量的if-else的判断
		
	8.责任链模式
		链式传递请求，直到有一个对象能处理为止。比如点击事件。
	
	9.解释器模式
		按照一定的规则去表示给定的对象。
		
	10.命令模式
		将一个请求封装成一个类。可以使请求能被记录，撤销。
	
	11.观察者模式
		定义对象间一种一对多的依赖关系，使当一个对象改变状态，则所有依赖它的对象都会
		得到通知并自动更新。
		
		主题:
			被观察者，持有注册的观察者的一个集合，当主题产生变化的时候，通知观察者
			进行更新，（调用观察者的一个方法）
		观察者：
			订阅某个主题，当主题产生变化时，某个方法会得到调用。
		
	12.备忘录模式
		在不破坏封闭的前提下，捕获一个对象的内部状态，并在对象之外保存这个状态，以便
		恢复保存的状态。
		
	
	13.迭代器模式
		提供一种方法顺序访问一个容器对象汇总的各个元素，而又不需要暴露该对象的内部
		表示。比如遍历
	
	14.模板模式
		定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个
		算法的结构即可重定义该算法的某些特定的步骤。
		一般将某个方法写作final，不允许重写。
	
	15.访问者模式
		封装一些作用于某种数据结构中的各元素的操作，他可以在不改变这个数据结构的前提
		下定义作用于这些元素的新的操作。
		
	16.中介者模式
		包装了一系列对象互相作用的方式，使得这些对象不必互相明显作用，从而使他们可以
		松散耦合。当某些对象之间的作用发生改变的时候，不会立即影响其他的对象之间的
		作用。
	
	17.代理模式
		委托模式，为其他对象提供一种代理以控制对这个对象的访问。委托者与被委托者需实现同一个接口。
		静态代理需要自己规定接口。
		
		interface I{
			public void say1();
			public void say2();
			public void say3();
		}
		//委托者
		class A implements I{
			@Override
			public void say1(){
				//....
			};
			
			@Override
			public void say2(){
				//....
			};
			
			@Override
			public void say3(){
				//....
			};
		}
		//被委托者
		class B implements I{
			I i;
			
			public B(I i){
				this.i = i
			}
		
			@Override
			public void say1(){
				i.say1();
			};
			
			@Override
			public void say2(){
				i.say2();
			};
			
			@Override
			public void say3(){
				i.say3();
			};
		}
		//使用
		I a = new A();
		I b = new B(a);
		b.say1();
		b.say2();
		b.say3();
		
		动态代理实现invocationHandler接口，来构造一个动态的代理，
		
		interface I{
			public void say1();
			public void say2();
			public void say3();
		}
		//委托者
		class A implements I{
			@Override
			public void say1(){
				//....
			};
			
			@Override
			public void say2(){
				//....
			};
			
			@Override
			public void say3(){
				//....
			};
		}
		
		//动态代理
		class DynamicProxy implements InvocationHandler{
			private Object obj;//委托者实例。
			
			public DynamicProxy(Object obj){
				this.obj = obj;
			}
			
			@Override
			public Object invoke(Object proxy,Method method,Object[] args) throws Throwable{
				Object result = method.invoke(obj,args);
				return result;
			}
		}
		
		//使用
		I a = new A();
		DynamicProxy proxy = new DynamicProxy(a);
		ClassLoader loader = a.getClass().getClassLoader();
		
		I b = (I)Proxy.newProxyInstance(loader,new Class[]{I.class},proxy);
		b.say1();
		b.say2();
		b.say3();
		
	
	18.组合模式
		将对象组合成树形结构以表示‘部分-整体’的层次结构，使得用户对单个对象和
		组合对象的使用具有一致性。（view viewgroup）
	
	19.适配器模式
		适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口
		不匹配而无法一起工作的两个类能够在一起工作。
		
		类适配器：通过adapter将现有的接口转换成目标的接口。通过继承实现。
		对象适配：通过代理实现。
	
	20.装饰模式
		动态的给一个对象添加一些额外的职责。通过继承实现。
	
	21.享元模式
		使用共享对象可有效的支持大量的细粒度的对象。
	
	22.外观模式
		要求一个子系统的外部与其内部的通讯必须通过一个统一的对象进行。
		需要提供一个高层次的接口，使得子系统更易于使用。
	
	23.桥接模式
		将抽象部分与实现部分分离，（两个独立变化的维度）使它们都可以独立地进行变化。
			
			
			
			
			
			